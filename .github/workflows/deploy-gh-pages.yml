# GitHub Actions workflow to build Nuxt 3 static site and deploy to GitHub Pages
# - Builds with `npm run generate` (uses `nuxt generate` from package.json)
# - Detects generated publish directory (`dist` or `.output/public`)
# - Copies the TF maps from `assets/tf` into the publish root as `tf/`
# - Copies the JS files from `assets/js` into the publish root as `js/`
# - Deploys the assembled artifact to GitHub Pages using native Actions

name: Deploy to GitHub Pages (Nuxt static)

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

on:
  push:
    branches:
      - master
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install --no-audit --no-fund

      - name: Generate static site
        run: npm run generate

      - name: Prepare artifact (include maps)
        run: |
          set -euo pipefail
          PUBLISH_SRC=""
          if [ -d "dist" ]; then
            PUBLISH_SRC="dist"
          elif [ -d ".output/public" ]; then
            PUBLISH_SRC=".output/public"
          else
            echo "No publish directory found (checked 'dist' and '.output/public')." >&2
            ls -la
            exit 1
          fi
          echo "Using publish source: $PUBLISH_SRC"

          rm -rf pages_artifact
          mkdir -p pages_artifact
          cp -a "$PUBLISH_SRC/." pages_artifact/

          # Ensure TF maps are included so they're downloadable at /db-fastdl/tf/*
          if [ -d "assets/tf" ]; then
            mkdir -p pages_artifact/tf
            cp -a assets/tf/. pages_artifact/tf/
            echo "Copied assets/tf -> pages_artifact/tf"
          else
            echo "No assets/tf directory found; skipping TF map copy"
          fi

          # Also copy assets/js if present
          if [ -d "assets/js" ]; then
            mkdir -p pages_artifact/js
            cp -a assets/js/. pages_artifact/js/
            echo "Copied assets/js -> pages_artifact/js"
          fi

      - name: Inspect pages_artifact (debug)
        run: |
          echo "pages_artifact summary:" && du -sh pages_artifact || true
          echo "Top-level contents:" && ls -la pages_artifact | sed -n '1,200p' || true
          if [ -d "pages_artifact/tf" ]; then echo "tf listing:" && find pages_artifact/tf -maxdepth 2 -type f -print | sed -n '1,200p' || true; fi

      - name: Configure Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages_artifact

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

# Notes for usage:
# - This workflow expects your default branch is named `master`. Adjust the `on.push.branches` value if different.
# - It will publish to the `gh-pages` branch. Configure GitHub Pages in the repository settings to serve from that branch.
# - If you want the action to push commits as a specific user or keep a full commit history, you can create and add
#   an SSH Deploy Key as `ACTIONS_DEPLOY_KEY` in the repository secrets; otherwise the action falls back to using GITHUB_TOKEN.